#!/bin/bash

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

#  ipmisimtool is a simulator of ipmitool. It reads mock data file based on the driven command
#
#                sdr type {sensor_type}
#                sdr entity {entity_id}
#                sdr get {sensor_id}
#                sensor get {sensor_id}
#                sensor list
#                sel list
#                sel info
#
#
#        Note: Have some entries in SEL.


BASE_PATH="/opt/seagate/cortx/sspl"

filename=""

if [ -e /tmp/kcs_disable ]; then
    kcs_err="could not find inband device"
    echo "$kcs_err"
    exit 2

elif [ -e /tmp/lan_disable ]; then
    lan_err="Activate Session error: Command response could not be provided
            Error: Unable to establish LAN session
            Error: Unable to establish IPMI v1.5 / RMCP session"
    echo "$lan_err"
    exit 2
else
    # handle 'sel' commands
    if [ "$1" == "sel" ]; then
        command=$2
        case $command in
                "list")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sel_list.txt"
                        ;;
                "info")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sel_info.txt"
                        ;;
        esac
        if [ "$filename" == "" ]; then
                echo "Invalid command: $@. IPMISIMTOOL can't process it."
                exit 1
        fi
        printf "$(cat $filename)\n"
    fi

    # handle 'sdr type' commands
    if [ "$1 $2" == "sdr type" ]; then
        command=${@:3}
        case $command in
                "Fan"|"fan")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/fan.txt"
                        ;;
                "Power Supply"|"power supply")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/power_supply.txt"
                        ;;
                "Power Unit"|"power unit")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/power_unit.txt"
                        ;;
                "Drive Slot / Bay"|"drive slot | bay")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/disk.txt"
                        ;;
                "Temperature"|"temperature")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/temperature.txt"
                        ;;
                "Voltage"|"voltage")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/voltage.txt"
                        ;;
                "Current"|"current")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/current.txt"
                        ;;
                *)
                        echo "No records found for given sdr or Invalid command - $@. IPMISIMTOOL can't process it."
                        exit 1
        esac
        printf "$(cat $filename)\n"
    fi


    # handle 'sensor list' commands
    if [ "$1 $2" == "sensor list" ]; then
        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_list.txt"
        printf "$(cat $filename)\n"
    fi


    # handle 'sensor get' commands
    if [ "$1 $2" == "sensor get" ]; then
        command=${@:3}
        case $command in
                "Fan Redundancy"|"fan redundancy")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_fan_redund.txt"
                        ;;
                "PS2 Status"|"ps2 status")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_ps2.txt"
                        ;;
                "HDD 0 Status"|"hdd 0 status")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_hdd0.txt"
                        ;;
                "Pwr Unit Redund"|"pwr unit redund")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_pw_unit.txt"
                        ;;
                "CPU1 Temp"|"cpu1 temp")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_cpu_temp.txt"
                        ;;
                "12V"|"12v")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_12v.txt"
                        ;;
                "PS1 Curr Out"|"ps1 curr out")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sensor_ps1_curr.txt"
                        ;;
                *)
                        echo "No records found for the sensor or Invalid command - $@. IPMISIMTOOL can't process it."
                        exit 1
        esac
        printf "$(cat $filename)\n"
    fi


    # handle 'sdr entity' commands
    if [ "$1 $2" == "sdr entity" ]; then
        if [ "$#" -ne 3 ]; then
                echo "Invalid command: $@. IPMISIMTOOL can't process it."
                exit 1
        fi
        if [ "$3" == "" ] | [ "$3" == "None" ]; then
                echo "No records found for the entity id. IPMISIMTOOL can't process it."
                exit 1
        fi
        res=`egrep "\|[ ]+$3 \|" $BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/entity.txt`
        if [ "$res" == "" ]; then
                echo "No fru found for given entity id $3"
                exit 1
        fi
        echo $res
    fi


    # handle 'sdr get' commands
    if [ "$1 $2" == "sdr get" ]; then
        command=${@:3}
        case $command in
                "Fan Redundancy"|"fan redundancy")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_fan_redund.txt"
                        ;;
                "PS2 Status"|"ps2 status")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_ps2.txt"
                        ;;
                "HDD 0 Status"|"hdd 0 status")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_hdd0.txt"
                        ;;
                "Pwr Unit Redund"|"pwr unit redund")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_pw_unit.txt"
                        ;;
                "CPU1 Temp"|"cpu1 temp")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_cpu1_temp.txt"
                        ;;
                "12V"|"12v")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_12v.txt"
                        ;;
                "PS1 Curr Out"|"ps1 curr out")
                        filename="$BASE_PATH/sspl_test/ipmi_simulator/ipmi_mock_data/sdr_ps1_curr.txt"
                        ;;
                *)
                        echo "No records found for the sensor or Invalid command - $@. IPMISIMTOOL can't process it."
                        exit 1
        esac
        printf "$(cat $filename)\n"
    fi
fi
