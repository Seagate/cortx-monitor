#!/usr/bin/python3.6

import sys
import pika
import json
import pprint
import socket
import os
import time
import consul
import random

SSPL_USER = "sspluser"
SSPL_PASS = "sspl4ever"
SSPL_VHOST = "SSPL"

CONSUL_HOST = '127.0.0.1'
CONSUL_PORT = '8500'
component = 'sspl/config'
RABBITMQ_CLUSTER_SECTION = 'RABBITMQCLUSTER'
host = os.getenv('CONSUL_HOST', CONSUL_HOST)
port = os.getenv('CONSUL_PORT', CONSUL_PORT)
consul_conn = consul.Consul(host=host, port=port)


def get_cluster_connection(username, password, virtual_host):
    """Makes connection with one of the rabbitmq node.
    """
    consul_key = component + '/' + RABBITMQ_CLUSTER_SECTION + '/' + 'cluster_nodes'
    hosts = consul_conn.kv.get(consul_key)[1]["Value"].decode()
    if isinstance(hosts, str):
        hosts = hosts.strip().split(",")
    print(f"Cluster Nodes: {hosts}")

    ampq_hosts = [
        f'amqp://{username}:{password}@{host}/{virtual_host}' for host in hosts
    ]
    ampq_hosts = [pika.URLParameters(host) for host in ampq_hosts]
    random.shuffle(ampq_hosts)
    connection = pika.BlockingConnection(ampq_hosts)
    return connection


channel = None
def process_msg(ch, method, properties, body):
    """
    Following is a message to check.
    {"username": "sspl-ll", "description": "Seagate Storage Platform Library - Low Level - Actuator Response", "title": "SSPL-LL Actuator Response", "expires": 3600, "signature": "None", "time": "2019-10-03 07:52:40.268960", "message": {"actuator_response_type": {"thread_controller": {"module_name": "ThreadController", "thread_response": "SSPL-LL service has started successfully", "ack_type": "N/A"}}, "sspl_ll_msg_header": {"msg_version": "1.0.0", "schema_version": "1.0.0", "sspl_version": "1.0.0"}}}
    """
    global channel
    # print(body)
    successfull_msg = "SSPL-LL service has started successfully"
    received_msg = None
    msg_dict = None
    try:
        msg_dict = json.loads(body)
        received_msg = msg_dict["message"]["actuator_response_type"]["thread_controller"]["thread_response"]
        # Validate SSPL service host too, because multiple SSPL instances
        # may send the same message in the cluster.
        host = msg_dict["message"]["actuator_response_type"]["host_id"]
        if received_msg == successfull_msg and host == socket.getfqdn():
            print("Got message: {0}".format(received_msg))
            channel.stop_consuming()
            sys.exit(0)
    except Exception as e:
        print(e)
        pass

try:
    if len(sys.argv) <= 2 or len(sys.argv) > 3:
        print("usage: %s <exchange> <key>\n")
        sys.exit(1)

    SSPL_EXCHANGE = sys.argv[1]
    SSPL_KEY = sys.argv[2]
    connection = None
    max_attempt = 30
    while not connection and max_attempt > 0:
        try:
            connection = get_cluster_connection(SSPL_USER, SSPL_PASS, SSPL_VHOST)
        except Exception as e:
            time.sleep(4)
            if max_attempt == 0:
                raise e
    channel = connection.channel()
    result = channel.queue_declare(queue="", exclusive=True)
    channel.exchange_declare(exchange=SSPL_EXCHANGE, exchange_type='topic', durable=True)
    channel.queue_bind(queue=result.method.queue, exchange=SSPL_EXCHANGE, routing_key=SSPL_KEY)
    channel.basic_consume(on_message_callback=process_msg, queue=result.method.queue)
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()
except Exception as e:
    print(e)
