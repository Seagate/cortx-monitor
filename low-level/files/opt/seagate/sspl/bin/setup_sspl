#!/bin/bash

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

set -e -u -o pipefail


script_dir=$(dirname $0)

# Import common constants
source $script_dir/constants.sh


usage()
{
    echo "\
    Standalone SSPL deploy script.
    (Bounded to single node deployment)
    Usage:
         $0
            [-p <Product name>]
            [-h|--help]
    OPTION:
    -p      <PRODUCT NAME>           Product name (LDR_R1 | LDR_R2)
    "
    exit 0
}

parse_args()
{
    while getopts ":p:h:" OPTION; do
        case $OPTION in
            p )
                PRODUCT_NAME=$OPTARG
                ;;
            h )
                usage
                ;;
            * )
                echo "ERROR: Unknown option provided: $1"
                ;;
        esac
    done
}

parse_args "$@"

[ "$PRODUCT_NAME" != "LDR_R2" ] && {
    # For LDR_R1, SSPL should be running in active state on master node
    # and degraded state on slave node.
    echo "ERROR: deploy_sspl doesn't have support for product '$PRODUCT'"
    exit 1
}

if [ -z "$(rpm -qa | grep cortx-sspl)" ]
then
    echo "ERROR: Failed to locate any installed SSPL RPMS."
    exit 1
fi

# configure sspl
$SSPL_BASE_DIR/bin/sspl_post_install -p "$PRODUCT_NAME"
$SSPL_BASE_DIR/bin/sspl_setup_init -r cortx
$SSPL_BASE_DIR/bin/sspl_config -f

# Start SSPL serice
systemctl start sspl-ll.service

# Wait till sspl-ll service become active
MAX_RETRY=6
TRIES=0
SSPL_STATUS=$(systemctl show -p ActiveState sspl-ll | sed 's/ActiveState=//g')
while [ $SSPL_STATUS != "active" ]
do
    echo "sspl-ll service is not started. Waiting..."
    sleep 5
    TRIES=$((TRIES+1))
    SSPL_STATUS=$(systemctl show -p ActiveState sspl-ll | sed 's/ActiveState=//g')
    if [ $TRIES -gt $MAX_RETRY ]
    then
        break
    fi
    systemctl start sspl-ll.service
done

if [ "$SSPL_STATUS" == "active" ]
then
    echo "sspl-ll service is started."
    sleep 5
    echo "**********************************************************************"
    echo "SSPL state is 'active'"
    echo "**********************************************************************"
else
    echo "ERROR: sspl-ll service is not started."
fi
