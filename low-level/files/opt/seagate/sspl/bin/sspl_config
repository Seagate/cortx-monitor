#!/bin/bash

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

set -e -u -o pipefail

#################################################################
# This script performs following operations
# - Check if product is one of the enabled products
# - Configures role in sspl.conf if supplied
# - Executes sspl_reinit script
# - Updates cluster nodes passed in cli to consul
#################################################################

script_dir=$(dirname $0)

# Import common constants
source $script_dir/constants.sh

SCRIPT_NAME=$(basename $0)
DIR_NAME="/opt/seagate/$PRODUCT_FAMILY/sspl"
RSYSLOG_CONF="/etc/rsyslog.d/0-iemfwd.conf"
RSYSLOG_SSPL_CONF="/etc/rsyslog.d/1-ssplfwd.conf"
LOGROTATE_DIR="/etc/logrotate.d"
IEM_LOGROTATE_CONF="$LOGROTATE_DIR/iem_messages"
SSPL_LOGROTATE_CONF="$LOGROTATE_DIR/sspl_logs"
SSPL_CONFIGURED="/var/$PRODUCT_FAMILY/sspl/sspl-configured"

usage() {
    cat << EOF
$SCRIPT_NAME [{config [-f] [-r <ssu|gw|cmu|vm>] [-n <node1, node2 name>]}]
config options:
    -f  Force reinitialization. Do not prompt
    -r  Role to be configured on the current node
    -n  Nodes which needs to be added into rabbitmq cluster
EOF
    exit 1
}

config_sspl() {

    force=0
    role=
    rmq_cluster_nodes=

    while [ $# -gt 0 ]; do
        case $1 in
            -f )
                force=1
                ;;
            -r )
                [ $# -lt 2 ] && usage
                shift 1 && role=$1
                [[ $ROLES =~ (^| )$role($| ) ]] || usage
                ;;
            -n )
                shift 1 && rmq_cluster_nodes=$1
                ;;
            * )
                usage
                ;;
        esac
        shift 1
    done

    [ $(id -u) -ne 0 ] && echo "Run this command with root privileges!!" &&
        exit 1
    [ -f $SSPL_CONF ] || {
        echo "Missing configuration!! Create $SSPL_CONF and rerun.";
        exit 1;
    }

    # Put minion id, consul_host and consul_port in conf file
    python3 $script_dir/salt_util.py $SSPL_CONF;

    [ -f $SSPL_CONFIGURED ] && {
        [ "$force" = "1" ] && ans="y" || ans=;
        while [ "$ans" != "y" -a "$ans" != "n" ]; do
            echo -n "SSPL is already initialized. Reinitialize SSPL? [y/n]: ";
            read ans;
        done;
        [ "$ans" != "y" ] && exit 1;
        rm -f $SSPL_CONFIGURED;
    }

    # Get product
    product=$(sed -nr 's/^product=([^,]+)$/\1/p' $SSPL_CONF | head -1)
    [ -z "$product" ] && echo "No product specified in $SSPL_CONF" && exit 1

    enabled_products=$(python3.6 $DIR_NAME/bin/sspl_constants.py)
    [ -z "$enabled_products" ] && echo "No enabled products!" && exit 1
    [[ $enabled_products =~ (^| )$product($| ) ]] || {
        echo "Product '$product' is not in enabled products list: $enabled_products";
        exit 1;
    }

    # Configure role
    [ -z "$role" ] || sed -i "s/^setup=.*/setup=$role/g" $SSPL_CONF

    # Add sspl-ll user to required groups and sudoers file etc.
    echo "Initializing SSPL configuration ... "
    $DIR_NAME/bin/sspl_reinit $product || {
        reinit_err="$?";
        echo -n "$DIR_NAME/bin/sspl_reinit failed ";
        echo "with exit code ${reinit_err} for product $product";
        exit 1;
    }

    echo "SSPL configured successfully."
    mkdir -p $(dirname $SSPL_CONFIGURED)

    touch $SSPL_CONFIGURED

    # SSPL Log file configuration
    IFS='=' lfp=`grep ^sspl_log_file_path $SSPL_CONF`; logpath=( $lfp )
    SSPL_LOG_FILE_PATH=`echo ${logpath[1]}`

    [ ! -z "$SSPL_LOG_FILE_PATH" ] &&
    {
        sed -i "s|File=.*|File=\"$SSPL_LOG_FILE_PATH\")|g" $RSYSLOG_SSPL_CONF
        sed -i "1 s|^.*$|${SSPL_LOG_FILE_PATH}|g" $DIR_NAME/conf/etc/logrotate.d/sspl_logs
    }

    # IEM configuration
    # Configure log file path in Rsyslog and logrotate configuration file
    IFS='=' lfp=`grep ^log_file_path $SSPL_CONF`; datapath=( $lfp )
    LOG_FILE_PATH=`echo ${datapath[1]}`
    if [ -z "$LOG_FILE_PATH" ]
    then
        sed -i "s|File=.*|File=\/var/log/$PRODUCT_FAMILY/iem/iem_messages\"|g" $RSYSLOG_CONF
    else
        sed -i "s|File=.*|File=\"${LOG_FILE_PATH}\"|g" $RSYSLOG_CONF
        sed -i "1 s|^.*$|${LOG_FILE_PATH}|g" $DIR_NAME/conf/etc/logrotate.d/iem_messages
    fi

    # Create logrotate dir in case it's not present for dev environment
    if [ ! -d "${LOGROTATE_DIR}" ]; then
        mkdir -p ${LOGROTATE_DIR}
    fi

    cp $DIR_NAME/conf/etc/logrotate.d/iem_messages $IEM_LOGROTATE_CONF
    cp $DIR_NAME/conf/etc/logrotate.d/sspl_logs $SSPL_LOGROTATE_CONF

    # This rsyslog restart will happen after successful updation of rsyslog
    # conf file and before sspl starts. If at all this will be removed from
    # here, there will be a chance that SSPL intial logs will not be present in
    # "/var/log/<product>/sspl/sspl.log" file. So, initial logs needs to be collected from
    # "/var/log/messages"
    systemctl restart rsyslog

    # For node replacement scenario consul will not be running on the new node. But,
    # there will be two instance of consul running on healthy node. When new node is configured
    # consul will be brought back on it. We are using VIP to connect to consul. So, if consul
    # is not running on new node, we dont need to error out.
    # If consul is not running, exit
    [ -f $REPLACEMENT_NODE_ENV_VAR_FILE ] || {
        CONSUL_PS=$(ps -aux | grep "consul" | grep -v "grep" || true)
        if [ -z "$CONSUL_PS" ]; then
            echo "Consul is not running, exiting..";
            exit 1
        fi
    }

}

cmd="config"
case $cmd in

    config )
        config_sspl $*
        ;;

    * )
        usage
        ;;
esac

# Skip this step if sspl is being configured for node replacement scenario as consul data is already
# available on healthy node
# Updating RabbitMQ cluster nodes.
# In node replacement scenario, avoiding feeding again to avoid over writing already configured values
# with which rabbitmq cluster may have been created
[ -f $REPLACEMENT_NODE_ENV_VAR_FILE ] || {
    # Update cluster_nodes key in consul
    out=$(rabbitmqctl cluster_status | grep running_nodes | cut -d '[' -f2 | cut -d ']' -f1 | sed 's/rabbit@//g' | sed 's/,/, /g')
    pout=$(echo $out | sed  "s/'//g" | sed  "s/ //g")
    $CONSUL_PATH/consul kv put sspl/config/RABBITMQCLUSTER/cluster_nodes $pout
    [ -n "$rmq_cluster_nodes" ] && $CONSUL_PATH/consul kv put sspl/config/RABBITMQCLUSTER/cluster_nodes $rmq_cluster_nodes
}
# Getting node names using rabbitmqctl is depreciated (EOS-8860)
#out=$(rabbitmqctl cluster_status | grep running_nodes | cut -d '[' -f2 | cut -d ']' -f1 | sed 's/rabbit@//g' | sed 's/,/, /g')
#pout=$(echo $out | sed  "s/'//g")
#$CONSUL_PATH/consul kv put sspl/config/RABBITMQCLUSTER/cluster_nodes $pout

# Skip this step if sspl is being configured for node replacement scenario as consul data is already
# available on healthy node
# Updating build requested log level
[ -f $REPLACEMENT_NODE_ENV_VAR_FILE ] || {
    log_level=`cat $DIR_NAME/conf/build-requested-loglevel | sed 's/ *$//'`
    case $log_level in
        "DEBUG" | "INFO" | "WARNING" | "ERROR" | "CRITICAL")
            $CONSUL_PATH/consul kv put sspl/config/SYSTEM_INFORMATION/log_level $log_level;;
        "");;
        *)
            echo "Unexpected log level is requested, '$log_level'";;
    esac
}
