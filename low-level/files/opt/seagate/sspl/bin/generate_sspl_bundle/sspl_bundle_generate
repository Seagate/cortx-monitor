#!/usr/bin/python3.6

import tarfile
import os
import time
import sys
import socket
import json
import subprocess

from framework.platforms.realstor.realstor_enclosure import singleton_realstorencl
from framework.base.sspl_constants import PRODUCT_FAMILY, SUPPORT_REQUESTOR_NAME, SUPPORT_EMAIL_ID, SUPPORT_CONTACT_NUMBER, \
     ENCL_TRIGGER_LOG_MAX_RETRY, ENCL_DOWNLOAD_LOG_MAX_RETRY, ENCL_DOWNLOAD_LOG_WAIT_BEFORE_RETRY

# Add the top level directories
sys.path.insert(0, f'/opt/seagate/{PRODUCT_FAMILY}/sspl/low-level')
from framework.utils.config_reader import ConfigReader

SYS_INFORMATION = "SYSTEM_INFORMATION"
IEM_SENSOR = "IEMSENSOR"

localTempPath = "/tmp/support_bundle/"
sspl_log_default = f"/var/log/{PRODUCT_FAMILY}/sspl"
iem_log_default = f"/var/log/{PRODUCT_FAMILY}/iem"
onGoingRequestPath = "/tmp/sspl-sb-req.txt"
sspl_conf_dir = "/opt/seagate/eos-prvsnr/pillar/components/sspl.sls"
rabbitmq_conf_dir = "/etc/rabbitmq/rabbitmq.config"
rabbitmq_log_dir = "/var/log/rabbitmq"
rabbitmq_status = "/tmp/rabbitmq_status.txt"
encl_manifest = "/tmp/encl_manifest.json"
node_manifest = "/tmp/node_manifest.json"
manifest_summary = "/tmp/manifest_summary.json"
enclosure_log = "/tmp/enclosure_logs.zip"
node_hostname = 'node_'+socket.gethostname().split('.', 1)[0]
encl_summary_filter={}
encl_summary_fields=["object-name", "durable-id", "vendor-name", "product-id", "serial-number",
                     "model", "product-brand", "description", "status", "health", "health-reason",
                     "platform-type", "platform-brand", "part-number", "enclosure-wwn", "vendor",
                     "vendor-name"]
node_summary_fields=['id', 'class', 'description', 'product', 'serial', 'vendor',
                     'part-number', 'model-number','children', 'physid', 'version']
rabbitmq_cmd = {
    "Rabbitmq status": "systemctl status rabbitmq-server",
    "Rabbitmq cluster status": "rabbitmqctl cluster_status",
    "Rabbitmq node status": "rabbitmqctl status",
    "Rabbitmq environment": "rabbitmqctl environment",
    "Rabbitmq report": "rabbitmqctl report",
    "Lists all queues in the current node": "rabbitmqctl list_queues",
    "Lists all queues in the vhost SSPL": "rabbitmqctl list_queues -p SSPL",
    "Lists all vhosts in the current node": "rabbitmqctl list_vhosts",
    "Lists all rabbitmq channels in virtual host SSPL": "rabbitmqctl list_channels -p SSPL",
    "Lists all users": "rabbitmqctl list_users"
}

def make_sspl_support_bundle_tarfile(parser, tmpFile):
    try:
        conf_reader = ConfigReader()

    except (IOError, ConfigReader.Error) as err:
        print("[ Error ] when validating the configuration file %s :" % \
            sspl_conf_dir)
        print(err)
        print("Exiting ...")
        sys.exit(1)

    sspl_log_dir = conf_reader._get_value_with_default(SYS_INFORMATION,
        "sspl_log_file_path", sspl_log_default).replace("/sspl.log","")

    iem_log_dir = conf_reader._get_value_with_default(IEM_SENSOR,
        "log_file_path", iem_log_default).replace("/iem_messages","")

    configure_path = parser[2]
    if configure_path:
        if os.path.exists(configure_path):
            localTempPath = configure_path+"sspl/"
        else:
            print("Given path doesn't exist")
            tmpFile.close()
            os.remove(onGoingRequestPath)
            sys.exit(1)
    if not os.path.exists(localTempPath):
        os.makedirs(localTempPath)
    try:
        sspl_state = ""
        try:
            _, sspl_state=open(f"/var/{PRODUCT_FAMILY}/sspl/data/state.txt").readline().rstrip().split("=")
            if sspl_state == 'active':
                subprocess.call([f"/opt/seagate/{PRODUCT_FAMILY}/sspl/lib/resource_health_view", "-n", "-e", "-s"], shell=False)
            else:
                print("SSPL state is not active, So enclosure logs are ignored to collecte.")
                subprocess.call([f"/opt/seagate/{PRODUCT_FAMILY}/sspl/lib/resource_health_view", "-n", "-s"], shell=False)
        except (FileNotFoundError, OSError) as e:
            print(f"Failed to open the SSPL 'state.txt' file with an error '{e}',\
                Can't determine the SSPL state, So enclosure logs also being collected.")
            sspl_state == 'active'
            subprocess.call([f"/opt/seagate/{PRODUCT_FAMILY}/sspl/lib/resource_health_view", "-n", "-e", "-s"], shell=False)
        rmq_file = open(rabbitmq_status, "w+")
        for key, value in rabbitmq_cmd.items():
            rmq_file.write(key+':\nCommand: '+value+'\n')
            try:
                out = os.popen(value).read()
                rmq_file.write(out+'\n\n')
            except IOError as e:
                rmq_file.write("Information is not available : %s \n\n" % e)
            rmq_file.write("======================================================= \n")
        rmq_file.close()

        if os.path.exists(encl_manifest) and sspl_state == 'active':
            with open(encl_manifest) as json_file:
                data = json.load(json_file)
                enclosure_wwn = data["enclosure_wwn"]
            file_name = "{0}_plus_encl_{1}_{2}.tar.gz".format(node_hostname, enclosure_wwn, parser[1])

        else:
            file_name = "{0}_{1}.tar.gz".format(node_hostname, parser[1])

        if sspl_state == "active":
            url = singleton_realstorencl.build_url("/")
            COLLECTING_DEBUG_LOG_STARTED = False
            for encl_trigger_log_retry_index in range(0, ENCL_TRIGGER_LOG_MAX_RETRY):
                response = singleton_realstorencl.ws_request(url, singleton_realstorencl.ws.HTTP_POST, \
                    post_data=f'/api/collectDebugData/"{SUPPORT_REQUESTOR_NAME}"{SUPPORT_EMAIL_ID}"{SUPPORT_CONTACT_NUMBER}')

                if not response:
                    print("{0}:: {2} status unavailable as ws request {1}"
                        " failed".format(singleton_realstorencl.EES_ENCL, url, "Debug log"))
                    break

                elif response.status_code != singleton_realstorencl.ws.HTTP_OK:
                    print("{0}:: http request {1} to get {3} failed with"
                        " err {2} enclosure trigger log retry index {4}".format(singleton_realstorencl.EES_ENCL, url, response.status_code, \
                            "Debug log", encl_trigger_log_retry_index))

                else:
                    response_data = response.json()
                    if response_data["status"][0]["response-type"] == "Success" and response_data["status"][0]["response"] == "Collecting debug logs.":
                        print("INFO: Collecting enclosure debug logs in progress")
                        COLLECTING_DEBUG_LOG_STARTED = True
                        break
                    else:
                        print("{0}:: http request {1} to get {3} failed with"
                            " response-type {2}".format(singleton_realstorencl.EES_ENCL, url, response_data["status"][0]["response-type"], "Debug log"))

            if COLLECTING_DEBUG_LOG_STARTED == True:
                url = singleton_realstorencl.build_url("/downloadDebugData")
                for encl_download_retry_index in range(0, ENCL_DOWNLOAD_LOG_MAX_RETRY):
                    response = singleton_realstorencl.ws_request(url, singleton_realstorencl.ws.HTTP_GET)
                    if not response:
                        print("{0}:: {2} status unavailable as ws request {1}"
                            " failed".format(singleton_realstorencl.EES_ENCL, url, "Debug log"))
                    elif response.status_code != singleton_realstorencl.ws.HTTP_OK:
                        print("{0}:: http request {1} to get {3} failed with"
                            " err {2}".format(singleton_realstorencl.EES_ENCL, url, response.status_code, "Debug log"))
                    else:
                        if response.headers.get('Content-Type') == 'application/json; charset="utf-8"':
                            response_data = response.json()
                            if response_data["status"][0]["response-type"] == "Error":
                                time.sleep(ENCL_DOWNLOAD_LOG_WAIT_BEFORE_RETRY)
                            else:
                                print("ERR: Unexpected response-type {0} URL {1}".format(response_data["status"][0]["response-type"],url))
                                break
                        elif response.headers.get('Content-Type') == 'IntentionallyUnknownMimeType; charset="utf-8"':
                            if response.headers.get('content-disposition') == 'attachment; filename="store.zip"':
                                with open(enclosure_log,'wb') as enclosure_resp:
                                    enclosure_resp.write(response.content)
                                    enclosure_resp.close()
                                    print("INFO: Enclosure debug logs saved successfully")
                            else:
                                print("ERR: No attachment found::{0}".format(url))
                            break
                        else:
                            print("ERR: Unknown Content-Type::{0}".format(url))
                            break
                    if encl_download_retry_index == ( ENCL_DOWNLOAD_LOG_MAX_RETRY - 1 ):
                        print("ERR: Enclosure debug logs retry count exceeded::{0}".format(url))

        with tarfile.open(localTempPath+"sspl_"+file_name, "w:gz") as tar:
            file_dir = "sspl_"+file_name.replace(".tar.gz","")
            if os.path.exists(sspl_log_dir):
                tar.add(sspl_log_dir, arcname=file_dir+"/"+node_hostname+"/sspl/logs/")
            if os.path.exists(sspl_conf_dir):
                tar.add(sspl_conf_dir, arcname=file_dir+"/"+node_hostname+"/sspl/config/sspl.sls")
            if os.path.exists(rabbitmq_status):
                tar.add(rabbitmq_status, arcname=file_dir+"/"+node_hostname+"/rabbitmq/status/rabbitmq_status.txt")
            if os.path.exists(rabbitmq_conf_dir):
                tar.add(rabbitmq_conf_dir, arcname=file_dir+"/"+node_hostname+"/rabbitmq/config/rabbitmq.config")
            if os.path.exists(rabbitmq_log_dir):
                tar.add(rabbitmq_log_dir, arcname=file_dir+"/"+node_hostname+"/rabbitmq/logs/")
            if os.path.exists(iem_log_dir):
                tar.add(iem_log_dir, arcname=file_dir+"/"+node_hostname+"/iems/")
            if os.path.exists(enclosure_log) and sspl_state == 'active':
                tar.add(enclosure_log, arcname=file_dir+"/encl_{0}/logs/enclosure-wwn-{0}-logs-{1}.zip".format(enclosure_wwn, str(int(time.time()))))
            tar.close()

        with tarfile.open(localTempPath+"manifest_"+file_name, "w:gz") as tar:
            file_dir = "manifest_"+file_name.replace(".tar.gz","")
            node_encl_summary = {}
            if os.path.exists(encl_manifest) and sspl_state == 'active':
                tar.add(encl_manifest, arcname=file_dir+"/enclosure-wwn-{0}-manifest.json".format(enclosure_wwn))
                with open(encl_manifest, 'r') as j:
                    encl_manifest_dict = json.loads(j.read())
                    node_encl_summary.update(fetch_encl_summary_data(encl_manifest_dict["hw_specifics"]))
            
            if os.path.exists(node_manifest):
                tar.add(node_manifest, arcname=file_dir+"/{0}-manifest.json".format(node_hostname))
                with open(node_manifest, 'r') as j:
                    node_manifest_dict = json.loads(j.read())
                    node_encl_summary.update(fetch_node_summary_data(node_manifest_dict["hw_specifics"]))
            write_content_in_file(node_encl_summary, manifest_summary, "manifest_summary.json")
            if os.path.exists(manifest_summary):
                tar.add(manifest_summary, arcname=file_dir+"/manifest_summary.json")
            tar.close()

    except (OSError, tarfile.TarError) as err:
        print("Facing problem while creating sspl support bundle : %s" % err)
        tmpFile.close()
        os.remove(onGoingRequestPath)
        sys.exit(1)

    print("SSPL Support Bundle File Uploaded Successfully..!")
    print("SSPL Support Bundle Location: %s" % localTempPath+"sspl_"+file_name)
    print("Manifest File Location: %s" % localTempPath+"manifest_"+file_name)

def write_content_in_file(file_data, file_path, instance):
    try:
        with open(file_path, 'w+') as fp:
            json.dump(file_data, fp,  indent=4)

    except Exception as e:
        print("Error in writing {0} file: {1}".format(instance, e))
        return False

def fetch_node_summary_data(node_manifest_dict):
    node_summary_types = ('sata', 'power', 'cpu', 'memory', 'pci')
    post_node_filter_list = []
    final_node_summary_dict={}
    try:
        filtered_data_all = filter_node_summary_dict(node_manifest_dict)
    except:
        print ('Unable to create manifest summary file')
        exit()

    for key in filtered_data_all['children'][0]['children']:
        if key['id'].lower().startswith(node_summary_types):
            post_node_filter_list.append(key)

    for key in filtered_data_all['children']:
        if key['id'].lower().startswith(node_summary_types):
            post_node_filter_list.append(key)

    os_serial = subprocess.Popen(['uname', '-rvmpio'], stdout=subprocess.PIPE).communicate()[0].decode("utf-8").rstrip()
    os_model = subprocess.Popen(['cat', '/etc/system-release'], stdout=subprocess.PIPE).communicate()[0].decode("utf-8").rstrip()
    os = {'id':'Operating System', 'version-number':os_model, 'system-info':os_serial}
    post_node_filter_list.append(os)

    cluster_id = subprocess.Popen(['salt-call', 'grains.get', 'cluster_id'], stdout=subprocess.PIPE).communicate()[0]
    cluster_id = cluster_id.decode("utf-8").rstrip().replace('local:\n    ', '')
    cortx = {'id':'Cortx SW', 'version-number':'NA', 'license-info': 'NA', 'cluster-id':cluster_id}
    post_node_filter_list.append(cortx)

    filtered_data_all['children'] = post_node_filter_list
    final_node_summary_dict.update({'server_'+filtered_data_all['id']:filtered_data_all})

    return final_node_summary_dict

def filter_node_summary_dict(node_manifest_dict):
        new_dic = {}
        for k, v in node_manifest_dict.items():
            if isinstance(v, dict):
                v = filter_node_summary_dict(v)
            elif isinstance(v, list):
                new_lst = []
                for d in v:
                    if isinstance(d, dict):
                        d = filter_node_summary_dict(d)
                        new_lst.append(d)
                v = new_lst
            if k in node_summary_fields:
                new_dic[k] = v
        return new_dic

def fetch_encl_summary_data(node_manifest_dict):
    final_encl_summary_dict={}
    encl_fields = ["controllers", "power-supplies", "fan-modules"]
    enclosure = node_manifest_dict["enclosures"][0]
    enclosure_wwn = enclosure["enclosure-wwn"]
    server = node_manifest_dict["system"][0]
    vendor_name = server.get("vendor-name", "NA") or "NA"
    product_id = server.get("product-id", "NA") or "NA"
    product_brand = server.get("product-brand", "NA") or "NA"
    platform_brand = server.get("platform-brand", "NA") or "NA"
    final_encl_summary_dict.update({"enclosure_"+enclosure_wwn:{'vendor-name':vendor_name, 'product-id':product_id,
                            'product-brand':product_brand, 'platform-brand':platform_brand}})
    for key in encl_summary_fields:
        value = enclosure.get(key)
        if value:
            if value == "N/A" : value = "NA"
            final_encl_summary_dict["enclosure_"+enclosure_wwn].update({key:value})
    for encl in encl_fields:
        filter_encl_summary_dict(enclosure[encl], encl)
    filter_encl_summary_dict(node_manifest_dict["drives"], "drives")
    final_encl_summary_dict["enclosure_"+enclosure_wwn].update(encl_summary_filter)

    return final_encl_summary_dict

def filter_encl_summary_dict(encl_data, encl_type):
    encl_summary_filter.update({encl_type:{}})
    for encl in encl_data:
        encl_durable_id = encl.get('durable-id')
        encl_summary_filter[encl_type].update({encl_durable_id:{}})
        if encl_type == 'fan-modules':
            for fan in encl.get('fan'):
                fan_durable_id = fan.get('durable-id')
                encl_summary_filter[encl_type][encl_durable_id].update({fan_durable_id:{}})
                update_encl_summary_dict(fan, encl_durable_id, encl_type, fan_durable_id)
        else:
            update_encl_summary_dict(encl, encl_durable_id, encl_type)

def update_encl_summary_dict(encl, encl_durable_id, encl_type, fan_durable_id=None):
    for key in encl_summary_fields:
        value = encl.get(key)
        if value:
            if value == "N/A" : value = "NA"
            if encl_type == 'fan-modules':
                encl_summary_filter[encl_type][encl_durable_id][fan_durable_id].update({key:value})
            else:
                encl_summary_filter[encl_type][encl_durable_id].update({key:value})

if __name__ == "__main__":
    if not os.path.isfile(onGoingRequestPath):
        if len(sys.argv) is not 3:
            print("Unrecognized arguments: %s" % sys.argv)
            sys.exit(1)
        tmpFile = open(onGoingRequestPath, "w")
        make_sspl_support_bundle_tarfile(sys.argv, tmpFile)
        tmpFile.close()
        os.remove(onGoingRequestPath)
    else:
        print("Already SSPL Support Bundle request is going on, So skipping current request..!")
        sys.exit(1)