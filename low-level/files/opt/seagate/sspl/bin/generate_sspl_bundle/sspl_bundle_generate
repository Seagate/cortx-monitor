#!/usr/bin/python3.6

import tarfile
import os
import time
import sys
import shutil
import json

from framework.platforms.realstor.realstor_enclosure import singleton_realstorencl
from framework.base.sspl_constants import PRODUCT_FAMILY, SUPPORT_REQUESTOR_NAME, SUPPORT_EMAIL_ID, SUPPORT_CONTACT_NUMBER, \
     ENCL_TRIGGER_LOG_MAX_RETRY, ENCL_DOWNLOAD_LOG_MAX_RETRY, ENCL_DOWNLOAD_LOG_WAIT_BEFORE_RETRY

# Add the top level directories
sys.path.insert(0, f'/opt/seagate/{PRODUCT_FAMILY}/sspl/low-level')
from framework.utils.config_reader import ConfigReader

SYS_INFORMATION = "SYSTEM_INFORMATION"
IEM_SENSOR = "IEMSENSOR"

localTempPath = "/tmp/support_bundle/"
sspl_log_default = f"/var/log/{PRODUCT_FAMILY}/sspl"
iem_log_default = f"/var/log/{PRODUCT_FAMILY}/iem"
onGoingRequestPath = "/tmp/sspl-sb-req.txt"
sspl_conf_dir = "/opt/seagate/{PRODUCT_FAMILY}/provisioner/pillar/components/sspl.sls"
rabbitmq_conf_dir = "/etc/rabbitmq/rabbitmq.config"
rabbitmq_log_dir = "/var/log/rabbitmq"
rabbitmq_status = "/tmp/rabbitmq_status.txt"
enclosure_log = "/tmp/enclosure_logs.zip"
enclosure_wwn = "NA"
rabbitmq_cmd = {
    "Rabbitmq status": "systemctl status rabbitmq-server",
    "Rabbitmq cluster status": "rabbitmqctl cluster_status",
    "Rabbitmq node status": "rabbitmqctl status",
    "Rabbitmq environment": "rabbitmqctl environment",
    "Rabbitmq report": "rabbitmqctl report",
    "Lists all queues in the current node": "rabbitmqctl list_queues",
    "Lists all vhosts in the current node": "rabbitmqctl list_vhosts",
    "Lists all rabbitmq channels in virtual host SSPL": "rabbitmqctl list_channels -p SSPL",
    "Lists all users": "rabbitmqctl list_users"
}

def make_sspl_support_bundle_tarfile(parser, tmpFile):
    file_name = "sspl_%s.tar.gz" % parser[1]
    try:
        conf_reader = ConfigReader()

    except (IOError, ConfigReader.Error) as err:
        print("[ Error ] when validating the configuration file %s :" % \
            sspl_conf_dir)
        print(err)
        print("Exiting ...")
        sys.exit(1)

    sspl_log_dir = conf_reader._get_value_with_default(SYS_INFORMATION,
        "sspl_log_file_path", sspl_log_default).replace("/sspl.log","")

    iem_log_dir = conf_reader._get_value_with_default(IEM_SENSOR,
        "log_file_path", iem_log_default).replace("/iem_messages","")

    configure_path = parser[2]
    if configure_path:
        if os.path.exists(configure_path):
            localTempPath = configure_path+"sspl/"
        else:
            print("Given path doesn't exist")
            tmpFile.close()
            os.remove(onGoingRequestPath)
            sys.exit(1)
    if not os.path.exists(localTempPath):
        os.makedirs(localTempPath)
    try:
        sspl_state = ""
        try:
            sspl_state=open(f"/var/{PRODUCT_FAMILY}/sspl/data/state.txt").readline().rstrip().split("=")
            # Capturing enclosure logs only when sspl state is active
            sspl_state = sspl_state[1] if len(sspl_state)==2 else ''
            if not sspl_state == 'active':
                print("SSPL state is not active, So enclosure data are ignored to collecte.")

        except (FileNotFoundError, OSError) as e:
            print(f"Failed to open the SSPL 'state.txt' file with an error '{e}',\
                Can't determine the SSPL state, So enclosure logs also being collected.")
            sspl_state == 'active'
        
        rmq_file = open(rabbitmq_status, "w+")
        for key, value in rabbitmq_cmd.items():
            rmq_file.write(key+':\nCommand: '+value+'\n')
            try:
                out = os.popen(value).read()
                rmq_file.write(out+'\n\n')
            except IOError as e:
                rmq_file.write("Information is not available : %s \n\n" % e)
            rmq_file.write("======================================================= \n")
        rmq_file.close()

        if sspl_state == "active" and "-noencl" not in parser:
            url = singleton_realstorencl.build_url("/")
            COLLECTING_DEBUG_LOG_STARTED = False
            for encl_trigger_log_retry_index in range(0, ENCL_TRIGGER_LOG_MAX_RETRY):
                response = singleton_realstorencl.ws_request(url, singleton_realstorencl.ws.HTTP_POST, \
                    post_data=f'/api/collectDebugData/"{SUPPORT_REQUESTOR_NAME}"{SUPPORT_EMAIL_ID}"{SUPPORT_CONTACT_NUMBER}')

                if not response:
                    print("{0}:: {2} status unavailable as ws request {1}"
                        " failed".format(singleton_realstorencl.LDR_R1_ENCL, url, "Debug log"))
                    break

                elif response.status_code != singleton_realstorencl.ws.HTTP_OK:
                    print("{0}:: http request {1} to get {3} failed with"
                        " err {2} enclosure trigger log retry index {4}".format(singleton_realstorencl.LDR_R1_ENCL, url, response.status_code, \
                            "Debug log", encl_trigger_log_retry_index))

                else:
                    response_data = response.json()
                    if response_data["status"][0]["response-type"] == "Success" and response_data["status"][0]["response"] == "Collecting debug logs.":
                        print("INFO: Collecting enclosure debug logs in progress")
                        COLLECTING_DEBUG_LOG_STARTED = True
                        break
                    else:
                        print("{0}:: http request {1} to get {3} failed with"
                            " response-type {2}".format(singleton_realstorencl.LDR_R1_ENCL, url, response_data["status"][0]["response-type"], "Debug log"))

            if COLLECTING_DEBUG_LOG_STARTED == True:
                enclosure_wwn = get_enclosure_wwn()
                url = singleton_realstorencl.build_url("/downloadDebugData")
                for encl_download_retry_index in range(0, ENCL_DOWNLOAD_LOG_MAX_RETRY):
                    response = singleton_realstorencl.ws_request(url, singleton_realstorencl.ws.HTTP_GET)
                    if not response:
                        print("{0}:: {2} status unavailable as ws request {1}"
                            " failed".format(singleton_realstorencl.LDR_R1_ENCL, url, "Debug log"))
                    elif response.status_code != singleton_realstorencl.ws.HTTP_OK:
                        print("{0}:: http request {1} to get {3} failed with"
                            " err {2}".format(singleton_realstorencl.LDR_R1_ENCL, url, response.status_code, "Debug log"))
                    else:
                        if response.headers.get('Content-Type') == 'application/json; charset="utf-8"':
                            response_data = response.json()
                            if response_data["status"][0]["response-type"] == "Error":
                                time.sleep(ENCL_DOWNLOAD_LOG_WAIT_BEFORE_RETRY)
                            else:
                                print("ERR: Unexpected response-type {0} URL {1}".format(response_data["status"][0]["response-type"],url))
                                break
                        elif response.headers.get('Content-Type') == 'IntentionallyUnknownMimeType; charset="utf-8"':
                            if response.headers.get('content-disposition') == 'attachment; filename="store.zip"':
                                with open(enclosure_log,'wb') as enclosure_resp:
                                    enclosure_resp.write(response.content)
                                    enclosure_resp.close()
                                    print("INFO: Enclosure debug logs saved successfully")
                            else:
                                print("ERR: No attachment found::{0}".format(url))
                            break
                        else:
                            print("ERR: Unknown Content-Type::{0}".format(url))
                            break
                    if encl_download_retry_index == ( ENCL_DOWNLOAD_LOG_MAX_RETRY - 1 ):
                        print("ERR: Enclosure debug logs retry count exceeded::{0}".format(url))

        with tarfile.open(localTempPath+file_name, "w:gz") as tar:
            file_dir = file_name.replace(".tar.gz","")
            if os.path.exists(sspl_log_dir):
                tar.add(sspl_log_dir, arcname=file_dir+"/sspl/logs/")
            if os.path.exists(sspl_conf_dir):
                tar.add(sspl_conf_dir, arcname=file_dir+"/sspl/config/sspl.sls")
            if os.path.exists(rabbitmq_status):
                tar.add(rabbitmq_status, arcname=file_dir+"/rabbitmq/status/rabbitmq_status.txt")
            if os.path.exists(rabbitmq_conf_dir):
                tar.add(rabbitmq_conf_dir, arcname=file_dir+"/rabbitmq/config/rabbitmq.config")
            if os.path.exists(rabbitmq_log_dir):
                tar.add(rabbitmq_log_dir, arcname=file_dir+"/rabbitmq/logs/")
            if os.path.exists(iem_log_dir):
                tar.add(iem_log_dir, arcname=file_dir+"/iems/")
            tar.close()

        if os.path.exists(enclosure_log) and sspl_state == 'active' and "-noencl" not in parser:
            enclosure_zip_file = "enclosure-wwn-{0}-logs-{1}.zip".format(enclosure_wwn, str(int(time.time())))
            shutil.copy(enclosure_log, localTempPath+enclosure_zip_file)

    except (OSError, tarfile.TarError) as err:
        print("Facing problem while creating sspl support bundle : %s" % err)
        tmpFile.close()
        os.remove(onGoingRequestPath)
        sys.exit(1)

    print("SSPL Support Bundle Files Uploaded Successfully..!")
    print("SSPL Support Bundle Location: %s" % localTempPath+file_name)
    if os.path.exists(enclosure_log) and sspl_state == 'active' and "-noencl" not in parser:
        print("Enclosure Log File Location: %s" % localTempPath+enclosure_zip_file)

def get_enclosure_wwn():
    url = singleton_realstorencl.build_url(singleton_realstorencl.URI_CLIAPI_SHOWENCLOSURE)
    response = singleton_realstorencl.ws_request(url, singleton_realstorencl.ws.HTTP_GET)

    if not response:
        print("{0}:: {2} status unavailable as ws request {1}"
            " failed".format(singleton_realstorencl.EES_ENCL, url, fru))
        return

    if response.status_code != singleton_realstorencl.ws.HTTP_OK:
        if url.find(singleton_realstorencl.ws.LOOPBACK) == -1:
            print("{0}:: http request {1} to get {3} failed with"
                " err {2}".format(singleton_realstorencl.EES_ENCL, url, response.status_code, fru))
        return

    response_data = json.loads(response.text)
    enclosure_wwn = response_data.get("enclosures")[0]["enclosure-wwn"]
    return enclosure_wwn

if __name__ == "__main__":
    if not os.path.isfile(onGoingRequestPath):
        if len(sys.argv) < 3:
            print("Unrecognized arguments: %s" % sys.argv)
            sys.exit(1)
        tmpFile = open(onGoingRequestPath, "w")
        make_sspl_support_bundle_tarfile(sys.argv, tmpFile)
        tmpFile.close()
        os.remove(onGoingRequestPath)
    else:
        print("Already SSPL Support Bundle request is going on, So skipping current request..!")
        sys.exit(1)
