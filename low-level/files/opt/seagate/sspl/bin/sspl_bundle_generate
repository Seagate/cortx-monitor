#!/usr/bin/python3.6

import tarfile
import os
import time
import sys
import socket
import json
import subprocess

# Add the top level directories
sys.path.insert(0, '/opt/seagate/eos/sspl/low-level')
from config_reader import ConfigReader

SYS_INFORMATION = "SYSTEM_INFORMATION"
IEM_SENSOR = "IEMSENSOR"

localTempPath = "/tmp/support_bundle/"
sspl_log_default = "/var/log/eos/sspl"
iem_log_default = "/var/log/eos/iem"
onGoingRequestPath = "/tmp/sspl-sb-req.txt"
sspl_conf_dir = "/opt/seagate/eos-prvsnr/pillar/components/sspl.sls"
rabbitmq_conf_dir = "/etc/rabbitmq/rabbitmq.config"
rabbitmq_log_dir = "/var/log/rabbitmq"
rabbitmq_status = "/tmp/rabbitmq_status.txt"
encl_manifest = "/tmp/encl_manifest.json"
node_manifest = "/tmp/node_manifest.json"
node_hostname = 'node_'+socket.gethostname().split('.', 1)[0]
rabbitmq_cmd = {
    "Rabbitmq status": "systemctl status rabbitmq-server",
    "Rabbitmq cluster status": "rabbitmqctl cluster_status",
    "Rabbitmq node status": "rabbitmqctl status",
    "Rabbitmq environment": "rabbitmqctl environment",
    "Rabbitmq report": "rabbitmqctl report",
    "Lists all queues in the current node": "rabbitmqctl list_queues",
    "Lists all queues in the vhost SSPL": "rabbitmqctl list_queues -p SSPL",
    "Lists all vhosts in the current node": "rabbitmqctl list_vhosts",
    "Lists all rabbitmq channels in virtual host SSPL": "rabbitmqctl list_channels -p SSPL",
    "Lists all users": "rabbitmqctl list_users"
}

def make_sspl_log_tarfile(parser, tmpFile):
    try:
        conf_reader = ConfigReader(is_init=True)

    except (IOError, ConfigReader.Error) as err:
        print("[ Error ] when validating the configuration file %s :" % \
            sspl_conf_dir)
        print(err)
        print("Exiting ...")
        sys.exit(1)

    sspl_log_dir = conf_reader._get_value_with_default(SYS_INFORMATION,
        "sspl_log_file_path", sspl_log_default).replace("/sspl.log","")

    iem_log_dir = conf_reader._get_value_with_default(IEM_SENSOR,
        "log_file_path", iem_log_default).replace("/iem_messages","")

    configure_path = parser[2]
    if configure_path:
        if os.path.exists(configure_path):
            localTempPath = configure_path+"sspl/"
        else:
            print("Given path doesn't exist")
            tmpFile.close()
            os.remove(onGoingRequestPath)
            sys.exit(1)
    if not os.path.exists(localTempPath):
        os.makedirs(localTempPath)
    try:
        sspl_state = ""
        try:
            sspl_state=open("/var/eos/sspl/data/state.txt").readline().rstrip().split("=")
            # Capturing enclosure data only when sspl state is active
            sspl_state = sspl_state[1] if len(sspl_state)==2 else ''
            if sspl_state == 'active':
                subprocess.call(["/opt/seagate/eos/sspl/lib/resource_health_view", "-n", "-e", "-s"], shell=False)
            else:
                print("SSPL state is not active, So enclosure logs are ignored to collecte.")
                subprocess.call(["/opt/seagate/eos/sspl/lib/resource_health_view", "-n", "-s"], shell=False)
        except (FileNotFoundError, OSError) as e:
            print(f"Failed to open the SSPL 'state.txt' file with an error '{e}',\
                Can't determine the SSPL state, So enclosure logs also being collected.")
            sspl_state == 'active'
            subprocess.call(["/opt/seagate/eos/sspl/lib/resource_health_view", "-n", "-e", "-s"], shell=False)
        rmq_file = open(rabbitmq_status, "w+")
        for key, value in rabbitmq_cmd.items():
            rmq_file.write(key+':\nCommand: '+value+'\n')
            try:
                out = os.popen(value).read()
                rmq_file.write(out+'\n\n')
            except IOError as e:
                rmq_file.write("Information is not available : %s \n\n" % e)
            rmq_file.write("======================================================= \n")
        rmq_file.close()

        if os.path.exists(encl_manifest) and sspl_state == 'active':
            with open(encl_manifest) as json_file:
                data = json.load(json_file)
                enclosure_wwn = data["enclosure_wwn"]
            file_name = "sspl_{0}_plus_encl_{1}_{2}.tar.gz".format(node_hostname, enclosure_wwn, parser[1])

        else:
            file_name = "sspl_{0}_{1}.tar.gz".format(node_hostname, parser[1])

        with tarfile.open(localTempPath+file_name, "w:gz") as tar:
            file_dir = file_name.replace(".tar.gz","")
            if os.path.exists(sspl_log_dir):
                tar.add(sspl_log_dir, arcname=file_dir+"/"+node_hostname+"/sspl/logs/")
            if os.path.exists(sspl_conf_dir):
                tar.add(sspl_conf_dir, arcname=file_dir+"/"+node_hostname+"/sspl/config/sspl.sls")
            if os.path.exists(rabbitmq_status):
                tar.add(rabbitmq_status, arcname=file_dir+"/"+node_hostname+"/rabbitmq/status/rabbitmq_status.txt")
            if os.path.exists(rabbitmq_conf_dir):
                tar.add(rabbitmq_conf_dir, arcname=file_dir+"/"+node_hostname+"/rabbitmq/config/rabbitmq.config")
            if os.path.exists(rabbitmq_log_dir):
                tar.add(rabbitmq_log_dir, arcname=file_dir+"/"+node_hostname+"/rabbitmq/logs/")
            if os.path.exists(iem_log_dir):
                tar.add(iem_log_dir, arcname=file_dir+"/"+node_hostname+"/iems/")
            if os.path.exists(node_manifest):
                tar.add(node_manifest, arcname=file_dir+"/{0}/manifest/{0}-manifest.json".format(node_hostname))
            if os.path.exists(encl_manifest) and sspl_state == 'active':
                tar.add(encl_manifest, arcname=file_dir+"/encl_{0}/manifest/enclosure-wwn-{0}-manifest.json".format(enclosure_wwn))
            tar.close()
    except (OSError, tarfile.TarError) as err:
        print("Facing problem while creating sspl support bundle : %s" % err)
        tmpFile.close()
        os.remove(onGoingRequestPath)
        sys.exit(1)

    print("SSPL Support Bundle File Uploaded Successfully..!")
    print("SSPL Support Bundle Location: %s" % localTempPath+file_name)

if __name__ == "__main__":
    if not os.path.isfile(onGoingRequestPath):
        if len(sys.argv) is not 3:
            print("Unrecognized arguments: %s" % sys.argv)
            sys.exit(1)
        tmpFile = open(onGoingRequestPath, "w")
        make_sspl_log_tarfile(sys.argv, tmpFile)
        tmpFile.close()
        os.remove(onGoingRequestPath)
    else:
        print("Already SSPL Support Bundle request is going on, So skipping current request..!")
        sys.exit(1)

