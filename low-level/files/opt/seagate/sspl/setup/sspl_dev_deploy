#!/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# ******************************************************************************
#  Description:   Initialize SSPL service by deploying SSPL RPMS and dependencies
#  Purpose    :   Setup yum repos, rabbitmq for SSPL and override config data
#  Usage      :   ./sspl_dev_deploy --help
# ******************************************************************************

import argparse
import os
import shutil
import urllib.request
import re
import socket
import glob
import traceback
import subprocess
import site
import importlib
import tarfile

localhost_fqdn = socket.getfqdn()
SSPL_BASE_DIR = "/opt/seagate/cortx/sspl"
UTILS_BASE_DIR = "/opt/seagate/cortx/utils"


class DeployError(Exception):
    """Generic Exception with error code and output."""

    def __init__(self, rc, message, *args):
        """Initialize with custom error message and return code."""
        self._rc = rc
        self._desc = message % (args)

    def __str__(self):
        """Format error string."""
        if self._rc == 0:
            return self._desc
        return "(%d): %s" % (self._rc, self._desc)


class SSPLDevDeploy:
    """SSPL Dev Deploy Script"""

    def __init__(self, args):
        """Initialize required config variables."""
        self.args = args
        self.CORTX_MONITOR_BASE_URL = "https://raw.githubusercontent.com/Seagate/cortx-monitor/main"
        self.build_url = ("http://cortx-storage.colo.seagate.com/releases"
                          "/cortx/github/main/centos-7.8.2003"
                          "/last_successful_prod/")
        self.target_build = None
        self.rpms_path = None
        self.nodes = None
        self.message_broker = "kafka"
        self.variable_file = None
        self.deploy_type = "1-node"
        self.utils_config = None
        self.temp_dir = "%s/conf/temp" % SSPL_BASE_DIR
        self.machine_id = None
        with open("/etc/machine-id") as f:
            self.machine_id = f.read().strip()
        if not self.machine_id:
            raise DeployError(1, "Failed to get machine-id.")
        # Overwite config values
        self.storage_type = None
        self.server_type = None

    def parse_args(self):
        """Override the default values."""
        if self.args.target_build_url:
            self.target_build = self.args.target_build_url
        if self.args.local_rpms_path:
            self.rpms_path = self.args.local_rpms_path
        if self.args.nodes:
            self.nodes = self.args.nodes.split(",")
        if self.args.variable_file:
            self.variable_file = self.args.variable_file
        if self.args.message_broker:
            self.message_broker = self.args.message_broker
        if self.args.storage_type:
            self.storage_type = self.args.storage_type
        if self.args.server_type:
            self.server_type = self.args.server_type
        if not self.nodes or len(self.nodes) == 1:
            self.deploy_type = "1-node"
        elif len(self.nodes) == 2:
            self.deploy_type = "3-node"
        else:
            raise DeployError(1,
                "Deploying on more than 3 node is not supported at this time.")

    def cleanup(self):
        """Stop sspl service and remove SSPL RPMS."""
        cmd = "systemctl stop sspl-ll.service"
        self._execute_cmd(cmd)
        cmd = "yum --setopt=tsflags=noscripts erase -y cortx-sspl.noarch"
        out, rc = self._execute_cmd(cmd)
        if rc != 0:
            raise DeployError(rc, "%s - %s CMD: %s",
                out, "Unable to remove sspl RPMS. Cleanup failed.", cmd)
        cmd = "yum --setopt=tsflags=noscripts erase -y cortx-py-utils"
        out, rc = self._execute_cmd(cmd)
        if rc != 0:
            raise DeployError(rc, "%s - %s CMD: %s",
                out, "Unable to remove cortx-py-utils. Cleanup failed.", cmd)
        if os.path.exists(self.temp_dir):
            cmd = "rm -rf %s" % self.temp_dir
            self._execute_cmd(cmd)

    def setup_yum_repos(self):
        """Setup common, 3rd_party and build specific repos."""
        setup_repo_url = self.CORTX_MONITOR_BASE_URL + \
            "/low-level/files/opt/seagate/sspl/setup/setup_yum_repos.py"
        with urllib.request.urlopen(setup_repo_url) as response, open(
                "setup_yum_repos.py", 'wb') as out_file:
            shutil.copyfileobj(response, out_file)
        os.chmod("setup_yum_repos.py", 0o775)

        if self.target_build:
            cmd = "./setup_yum_repos.py -t %s" % (self.target_build)
            out, rc = self._execute_cmd(cmd)
        else:
            cmd = "./setup_yum_repos.py"
            out, rc = self._execute_cmd(cmd)
        if rc != 0:
            raise DeployError(rc, "%s - %s CMD: %s",
                out, "Failed to setup yum repos.", cmd)

    def install_dependencies(self):
        """Install common and 3rd_party applications."""
        if not (self.target_build or self.rpms_path):
            raise DeployError(1, "Target build or RPMS path is not given.")
        pkg_name = "cortx-prereq"
        print("INFO: INSTALLING %s..." % pkg_name)
        cmd = "yum install -y %s" % pkg_name
        out, rc = self._execute_cmd(cmd)
        if rc != 0:
            raise DeployError(rc, "%s - %s CMD: %s",
                out, "Failed to install %s." % (pkg_name), cmd)

        pkg_name = "cortx-py-utils"
        print("INFO: INSTALLING cortx-py-utils...")
        build_url = ("http://cortx-storage.colo.seagate.com/releases/"
                     "cortx/components/github/main/centos-7.8.2003/"
                     "dev/cortx-utils/last_successful/")
        pkg = [re.findall("<a .*>(.*?)</a>", str(line))[0]
               for line in urllib.request.urlopen(build_url).readlines()
               if pkg_name in str(line)]
        if not pkg:
            print(f"ERROR: Unable to download {pkg_name}.")
        cmd = "yum install -y %s%s" % (build_url, pkg[0])
        out, rc = self._execute_cmd(cmd)
        if rc != 0:
            raise DeployError(rc, "%s - %s CMD: %s",
                out, "Failed to install %s." % (pkg_name), cmd)

    def install_sspl_rpms(self):
        """Install SSPL RPMS."""
        # If local RPMS location is specified, SSPL RPMS will be
        # installed from the speicifed path. Otherwise yum repos.
        if self.rpms_path:
            print("INFO: Installing SSPL RPMS from local path - %s" % (
                self.rpms_path))
            packages = glob.glob(self.rpms_path + '/cortx-*-2.*')
            sspl_rpm_cmd = f"sudo yum install -y {' '.join(packages)}"
            out, rc = self._execute_cmd(sspl_rpm_cmd)
            if rc != 0:
                raise DeployError(rc, "%s - %s CMD: %s",
                    out, "Failed to install SSPL RPMS.", sspl_rpm_cmd)
        else:
            print("INFO: Installing SSPL RPMS using yum repos...")
            sspl_cmd = "yum install -y cortx-sspl.noarch"
            sspl_test_cmd = "yum install -y cortx-sspl-test"
            out, rc = self._execute_cmd(sspl_cmd)
            if rc != 0:
                raise DeployError(rc, "%s - %s CMD: %s",
                    out, "Failed to install 'cortx-sspl'.", sspl_cmd)
            out, rc = self._execute_cmd(sspl_test_cmd)
            if rc != 0:
                raise DeployError(rc, "%s - %s CMD: %s",
                    out, "Failed to install 'cortx-sspl-test'.", sspl_test_cmd)

        # Reload site, so newly added packages can be imported
        importlib.reload(site)
        print("INFO: Done installing SSPL RPMS.")

    def setup_message_broker(self):
        """Setup message broker"""
        from cortx.utils.conf_store import Conf
        # Copy message bus conf files
        os.makedirs("/etc/cortx/", exist_ok=True)
        if self.message_broker == "kafka":
            self.setup_kafka()
        # Prepare utils config
        self.utils_config = "/etc/cortx/utils.yaml"
        utils_index = "utils"
        with open(self.utils_config, "w") as f:
            f.write("")
        Conf.load(utils_index, "yaml://%s" % self.utils_config)
        Conf.set(utils_index, "cortx>software>common>message_bus_type", self.message_broker)
        if not self.nodes:
            Conf.set(utils_index, "cortx>software>kafka>servers[0]", localhost_fqdn)
        else:
            for num, node in enumerate(self.nodes):
                Conf.set(utils_index, "cortx>software>kafka>servers[%s]" % num, node)
        Conf.save(utils_index)

    def setup_kafka(self):
        """Setup kafka"""
        file_path = (f"{self.CORTX_MONITOR_BASE_URL}"
                     "/low-level/files/opt/seagate/sspl/setup/standalone")
        kafka_version = '2.13-2.7.0'
        r = urllib.request.urlopen(f"{self.build_url}/3rd_party/commons/"
            f"kafka/kafka_{kafka_version}.tgz")
        with open(f"/tmp/kafka_{kafka_version}.tgz", "wb") as f:
            shutil.copyfileobj(r, f)
        tar = tarfile.open(f"/tmp/kafka_{kafka_version}.tgz")
        tar.extractall("/opt/kafka")
        tar.close()
        r = urllib.request.urlopen(f"{file_path}/zookeeper.service")
        with open("/etc/systemd/system/zookeeper.service", "wb") as f:
            shutil.copyfileobj(r, f)
        r = urllib.request.urlopen(f"{file_path}/kafka.service")
        with open("/etc/systemd/system/kafka.service", "wb") as f:
            shutil.copyfileobj(r, f)
        self._execute_cmd("systemctl enable zookeeper.service")
        self._execute_cmd("systemctl enable kafka.service")
        self._execute_cmd("systemctl daemon-reload")
        self._execute_cmd("systemctl start zookeeper.service")
        self._execute_cmd("systemctl start kafka.service")
        os.remove(f"/tmp/kafka_{kafka_version}.tgz")
        print("INFO: Done kafka setup.")

    def create_config(self, variable_file, config_files):
        """Override template varibales by values from input file."""
        from cortx.utils.conf_store import Conf
        lines = []
        variables = {}
        with open(variable_file) as f:
            lines = f.readlines()
        for line in lines:
            result = re.search(r"(.*)=(.*)", line.strip())
            if result:
                variables.update({result.groups()[0]: result.groups()[1]})
        for stage, c_file in config_files.items():
            replaced_data = None
            for k, v in variables.items():
                with open(c_file, "rt") as f:
                    data = f.read()
                replaced_data = data.replace(k, v)
                with open(c_file, "wt") as f:
                    f.write(replaced_data)
            if replaced_data:
                tmpl_var = re.search(r"(TMPL_[\w]+)", replaced_data)
                if tmpl_var:
                    raise DeployError(1,
                        "Failed to update config %s for %s." % (c_file, tmpl_var.group()))
            # Overwrite user requested feilds
            if stage in ["config", "init"] and self.storage_type and self.server_type:
                tmp_index = "tmp_sspl_%s" % stage
                Conf.load(tmp_index, "yaml://%s" % c_file)
                Conf.set(tmp_index, "server_node>%s>type" % self.machine_id, self.server_type)
                enclosure_id = Conf.get(tmp_index, "server_node>%s>storage>enclosure_id" %
                    self.machine_id)
                Conf.set(tmp_index, "storage_enclosure>%s>type" % enclosure_id, self.storage_type)
                Conf.save(tmp_index)

    def setup_sspl(self):
        """Initialize SSPL service."""
        # Override template varibales by values from input file
        post_install_tmpl = "%s/conf/sspl.post-install.tmpl.%s" % (SSPL_BASE_DIR, self.deploy_type)
        prepare_tmpl = "%s/conf/sspl.prepare.tmpl.%s" % (SSPL_BASE_DIR, self.deploy_type)
        config_tmpl = "%s/conf/sspl.config.tmpl.%s" % (SSPL_BASE_DIR, self.deploy_type)
        init_tmpl = "%s/conf/sspl.init.tmpl.%s" % (SSPL_BASE_DIR, self.deploy_type)
        tmpl_files = [post_install_tmpl, prepare_tmpl, config_tmpl, init_tmpl]
        os.makedirs(self.temp_dir)
        post_install_config = "%s/post-install.%s" % (self.temp_dir, self.deploy_type)
        prepare_config = "%s/prepare.%s" % (self.temp_dir, self.deploy_type)
        config_config = "%s/config.%s" % (self.temp_dir, self.deploy_type)
        init_config = "%s/init.%s" % (self.temp_dir, self.deploy_type)
        config_files = {
            "post_install": post_install_config,
            "prepare": prepare_config,
            "config": config_config,
            "init": init_config
        }
        for i in range(len(tmpl_files)):
            shutil.copyfile(tmpl_files[i], list(config_files.values())[i])
        self.create_config(self.variable_file, config_files)

        sspl_setup_script = "%s/bin/sspl_setup" % SSPL_BASE_DIR
        utils_setup_script = "%s/bin/utils_setup" % UTILS_BASE_DIR
        commands = [
            "%s post_install --config yaml://%s" % (utils_setup_script, self.utils_config),
            "%s post_install --config yaml://%s" % (sspl_setup_script, post_install_config),
            "%s prepare --config yaml://%s" % (sspl_setup_script, prepare_config),
            "%s config --config yaml://%s" % (utils_setup_script, self.utils_config),
            "%s config --config yaml://%s" % (sspl_setup_script, config_config),
            "%s init --config yaml://%s" % (sspl_setup_script, init_config)
        ]
        # Execute setup commands
        for cmd in commands:
            print("INFO: Executing command: '%s'" % (cmd))
            out, rc = self._execute_cmd(cmd)
            if rc:
                raise DeployError(rc, "%s - CMD: %s", out, cmd)

    def _execute_cmd(self, cmd):
        """Executing commands."""
        _out = None
        process = subprocess.Popen(cmd.split(),
                                   shell=False,
                                   stdout=None,
                                   stderr=subprocess.PIPE)
        response, error = process.communicate()
        if response:
            _out = response.decode()
        if error:
            _out = error.decode().replace("\n", " ")
        _rc = process.returncode
        return (_out, _rc)


def main(args):
    """Main method to start SSPL deployment."""
    deploy = SSPLDevDeploy(args)
    deploy.parse_args()
    if args.setup_repo:
        deploy.setup_yum_repos()
        return
    if args.cleanup:
        deploy.cleanup()
        return
    try:
        print("=======================")
        print("INFO: Deploying SSPL...")
        print("=======================")
        deploy.install_dependencies()
        deploy.install_sspl_rpms()
        deploy.setup_message_broker()
        deploy.setup_sspl()
    except:
        print("---DeployError---")
        traceback.print_exc()
        print("ERROR: Deployment is failed.")
    else:
        print("INFO: Deployment is successful !!")


if __name__ == '__main__':
    description = "SSPL dev deploy script."
    argParser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=description,
        add_help=True, allow_abbrev=False)
    argParser.add_argument("--setup_repo", action="store_true",
                           help="Setup yum repos")
    argParser.add_argument("-L", "--local_rpms_path", default="",
                           help="Local RPMS location")
    argParser.add_argument("-T", "--target_build_url", default="", help="Target "
        "build base url pointed to release bundle base directory. if specified "
        "the following directory structure is assumed:\n"
        "<base_url>/ \n centos7.7 <-- OS ISO is mounted here\n\t"
            "3rd_party <-- CORTX 3rd party ISO is mounted here \n\t"
            "cortx_iso <-- CORTX ISO (main) is mounted here")
    argParser.add_argument("-N", "--nodes", help="Nodes to create cluster")
    argParser.add_argument("-M", "--message_broker", help="Currently we support only 'kafka'",
                           default="kafka")
    argParser.add_argument("--variable_file", help="Holds input values to templates")
    argParser.add_argument("--storage_type", help="Set storage type at config stage.")
    argParser.add_argument("--server_type", help="Set server type at config stage.")
    argParser.add_argument("--cleanup", action="store_true",
                           help="Stop sspl-ll and remove installed SSPL RPMs")
    args = argParser.parse_args()
    main(args)
