#!/usr/bin/python3.6

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.


import subprocess
import sys
import socket
import consul
import os

from framework.utils.config_reader import ConfigReader
from framework.base.sspl_constants import component, CONSUL_HOST, CONSUL_PORT, COMMON_CONFIGS

CLUSTER_SECTION = 'MESSAGINGCLUSTER'
RABBITMQCTL = '/usr/sbin/rabbitmqctl'
ERLANG_COOKIE_PATH = '/var/lib/rabbitmq/.erlang.cookie'

host = os.getenv('CONSUL_HOST', CONSUL_HOST)
port = os.getenv('CONSUL_PORT', CONSUL_PORT)
consul_conn = consul.Consul(host=host, port=port)

config_reader = ConfigReader(is_init=True)


def _send_command(command, fail_on_error=True):
    print(f'Executing: {command}')
    process = subprocess.Popen(
        command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    response, error = process.communicate()
    if error is not None and \
       len(error) > 0:
        print("command '%s' failed with error\n%s" % (command, error))
        if fail_on_error:
            sys.exit(1)
        else:
            return str(error)
    return str(response)


def copy_erlang_cookie():
    print('Creating erlang cookie...')
    command = 'systemctl stop rabbitmq-server'
    _send_command(command)
    # all rabbitmq servers needs to have same erlang cookie for clustering.
    #cookie_value = config_reader._get_value(CLUSTER_SECTION, COMMON_CONFIGS.get(CLUSTER_SECTION).get('erlang_cookie'))
    consul_key = component + '/' + CLUSTER_SECTION + '/' + 'erlang_cookie'
    cookie_value = consul_conn.kv.get(consul_key)[1]["Value"].decode()
    command = f'chmod +w {ERLANG_COOKIE_PATH}'
    _send_command(command)
    command = f'echo "{cookie_value}" > {ERLANG_COOKIE_PATH}'
    _send_command(command)
    command = f'chmod -w {ERLANG_COOKIE_PATH}'
    _send_command(command)
    # restarting to make sure it starts in case it is not stopped already.
    command = 'systemctl restart rabbitmq-server'
    _send_command(command)
    print('Done creating erlang cookie')


def open_rabbitmq_ports():
    command = "systemctl start firewalld"
    _send_command(command)
    command = "firewall-cmd --zone=public --permanent --add-port=4369/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=25672/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=25672/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=5671-5672/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=15672/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=15672/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=61613-61614/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=1883/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --zone=public --permanent --add-port=8883/tcp"
    _send_command(command, fail_on_error=False)
    command = "firewall-cmd --reload"
    _send_command(command)


def cluster_rabbit_mq(nodes=[]):
    print('Joining to RabbitMQ cluster...')
    #nodes = config_reader._get_value_list(CLUSTER_SECTION, COMMON_CONFIGS.get(CLUSTER_SECTION).get('cluster_nodes'))
    fqdn = socket.getfqdn().split('.')[0]
    clustered = False
    for node in nodes:
        if node != fqdn and not clustered:
            command = "%s stop_app" % RABBITMQCTL
            response = _send_command(command)
            print("Stopping app: %s" % response)
            command = f'{RABBITMQCTL} join_cluster rabbit@{node}'
            response = _send_command(command, fail_on_error=False)
            print(f"Join response: {response}")
            if 'Error:' in response:
                print(f'Unable to connect to {node} error: {response}')
                print('Re-trying another node...')
            else:
                clustered = True
            command = "rabbitmqctl start_app"
            response = _send_command(command)
            print("node started")
            break
    if clustered:
        print('Clustering was successful.')
    else:
        print('Not connected any node. Please check configuration.')


if __name__ == '__main__':
    # Make sure RabbitMQ servier is running
    command = "systemctl start rabbitmq-server"
    _send_command(command)

    # Open RabbitMQ ports
    open_rabbitmq_ports()

    # Connect to cluster before creating user accounts.
    #nodes = config_reader._get_value_list(
    #    CLUSTER_SECTION, COMMON_CONFIGS.get(CLUSTER_SECTION).get('cluster_nodes')
    #)

    # Config-reader uses common configs and no ways to syncup with sspl config
    # at this time. As sspl_config alters cluster_nodes in consul based on inputs
    # sspl config is preferrable than common config fed into consul.
    consul_key = component + '/' + CLUSTER_SECTION + '/' + 'cluster_nodes'
    nodes = consul_conn.kv.get(consul_key)[1]["Value"].decode()

    if isinstance(nodes, str):
        nodes = nodes.strip().split(",")
    print(f"Cluster Nodes: {nodes}")

    # Always copy erlang cookie.
    copy_erlang_cookie()

    if len(nodes) > 1:
        cluster_rabbit_mq(nodes)
        print(f'RabbitMQ is running in {len(nodes)} nodes.')
    else:
        print('RabbitMQ is running in single node mode.')
