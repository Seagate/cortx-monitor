#!/bin/bash

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

set -u -o pipefail

SCRIPT_NAME=$(basename $0)
. $SCRIPT_NAME/constants.sh
DIR_NAME="/opt/seagate/$PRODUCT_FAMILY/sspl"
SSPL_CONF="/etc/sspl.conf"
RSYSLOG_CONF="/etc/rsyslog.d/0-iemfwd.conf"
RSYSLOG_SSPL_CONF="/etc/rsyslog.d/1-ssplfwd.conf"
LOGROTATE_DIR="/etc/logrotate.d"
IEM_LOGROTATE_CONF="$LOGROTATE_DIR/iem_messages"
SSPL_LOGROTATE_CONF="$LOGROTATE_DIR/sspl_logs"
SSPL_CONFIGURED="/var/$PRODUCT_FAMILY/sspl/sspl-configured"
ROLES="gw ssu vm cmu cortx"

SSU_DEPENDENCY_RPMS=(
                "sg3_utils"
                "gemhpi"
                "pull_sea_logs"
                "python-hpi"
                "zabbix-agent-lib"
                "zabbix-api-gescheit"
                "zabbix-xrtx-lib"
                "python-openhpi-baselib"
                "zabbix-collector"
     )

SSU_REQUIRED_PROCESSES=(
                "openhpid"
                "dcs-collectord"
                )

VM_DEPENDENCY_RPMS=("")

usage() {
    cat << EOF
$SCRIPT_NAME [{check|config [-f] [-r <ssu|gw|cmu|vm>]|create [-dp]]
config options:
    -f  Force reinitialization. Do not prompt
    -r  Role to be configured on the current node
    -s  Skip RabbitMQ reset step
create options:
    -dp Create configured datapath

EOF
    exit 1
}

check_for_dep_rpms() {

   rpms=("$@");

   if [ -z "$rpms" ]; then
       return
   fi

   for rpm in "${rpms[@]}"; do
        rpm -q --quiet $rpm;

        if [ $? -eq 1 ]; then
          echo "- Required rpm '$rpm' not installed, exiting";
          exit 1;
        fi
   done
}

check_for_active_processes() {

   processes=("$@");

   for proc in "${processes[@]}"; do
        pgrep -x $proc > /dev/null;

        if [ $? -eq 1 ]; then
            echo "- Required process '$proc' not running, exiting";
            exit 1;
        fi
   done

}

check_dependencies() {

    # Check for dependency rpms and required processes active state based on role
    case $1 in
       "ssu")
              echo "Checking for dependency rpms for role '$1'";
              check_for_dep_rpms "${SSU_DEPENDENCY_RPMS[@]}";

              echo "Checking for required processes running state for role '$1'";
              check_for_active_processes "${SSU_REQUIRED_PROCESSES[@]}";
              ;;

       "vm"|"gw"|"cmu")
              echo "Checking for dependency rpms for role '$1'";
              # No dependency currently. Keeping this section as it may be
              # needed in future.
              check_for_dep_rpms "${VM_DEPENDENCY_RPMS[@]}";
              # No processes to check in vm/gw/cmu env
              ;;

       *)
              echo -e "No rpm or process dependencies set, to check for supplied role '$1', skipping checks.\n";
              ;;
    esac
}

create_req() {
    while [ $# -gt 0 ]; do
        case $1 in
            -dp )
                IFS='=' dp=`grep data_path $SSPL_CONF`; datapath=( $dp )
                sspldp=`echo ${datapath[1]}`

                mkdir -p $sspldp
                chown -R sspl-ll $sspldp
                ;;
            * )
                usage
                ;;
        esac
        shift 1
    done
}

config_sspl() {

    # Install packages which are not available in YUM repo, from PIP
    pip3.6 install -r /opt/seagate/$PRODUCT_FAMILY/sspl/conf/requirements.txt

    # steps from %post section of sspl-ll.spec

    # Copy sspl conf
    [ -f /etc/sspl.conf ] || cp /opt/seagate/$PRODUCT_FAMILY/sspl/conf/sspl.conf.LDR_R1 /etc/sspl.conf

    # Copy rsyslog configuration
    [ -f /etc/rsyslog.d/0-iemfwd.conf ] ||
       cp /opt/seagate/$PRODUCT_FAMILY/sspl/conf/etc/rsyslog.d/0-iemfwd.conf /etc/rsyslog.d/0-iemfwd.conf

    [ -f $RSYSLOG_SSPL_CONF ] ||
       cp /opt/seagate/$PRODUCT_FAMILY/sspl/conf/$RSYSLOG_SSPL_CONF $RSYSLOG_SSPL_CONF

    force=0
    role=
    rabbitmq_reset=1

    while [ $# -gt 0 ]; do
        case $1 in
            -f )
                force=1
                ;;
            -r )
                [ $# -lt 2 ] && usage
                shift 1 && role=$1
                [[ $ROLES =~ (^| )$role($| ) ]] || usage
                ;;
            -s )
                rabbitmq_reset=
                ;;
            * )
                usage
                ;;
        esac
        shift 1
    done

    [ $(id -u) -ne 0 ] && echo "Run this command with root privileges!!" &&
        exit 1
    [ -f $SSPL_CONF ] || {
        echo "Missing configuration!! Create $SSPL_CONF and rerun.";
        exit 1;
    }

    [ -f $SSPL_CONFIGURED ] && {
        [ "$force" = "1" ] && ans="y" || ans=;
        while [ "$ans" != "y" -a "$ans" != "n" ]; do
            echo -n "SSPL is already initialized. Reinitialize SSPL? [y/n]: ";
            read ans;
        done;
        [ "$ans" != "y" ] && exit 1;
        rm -f $SSPL_CONFIGURED;
        systemctl stop sspl-ll.service;
        systemctl disable sspl-ll.service;
    }

    # Get product
    product=$(sed -nr 's/^product=([^,]+)$/\1/p' $SSPL_CONF | head -1)
    [ -z "$product" ] && echo "No product specified in $SSPL_CONF" && exit 1

    enabled_products=$(python3.6 $DIR_NAME/bin/sspl_constants.py)
    [ -z "$enabled_products" ] && echo "No enabled products!" && exit 1
    [[ $enabled_products =~ (^| )$product($| ) ]] || {
        echo "Product '$product' is not in enabled products list: $enabled_products";
        exit 1;
    }

    # Configure role
    [ -z "$role" ] || sed -i "s/^setup=.*/setup=$role/g" $SSPL_CONF

    # Check for sspl required processes and misc dependencies like installation,etc based on 'role'
    [ -z "$role" ] || check_dependencies $role

    # Add sspl-ll user to required groups and sudoers file etc.
    echo "Initializing SSPL configuration ... "
    $SSPL_BASE_DIR/bin/sspl_reinit $product || {
        reinit_err="$?";
        echo -n "$SSPL_BASE_DIR/bin/sspl_reinit failed ";
        echo "with exit code ${reinit_err} for product $product";
        exit 1;
    }

    # Create /tmp/dcs/hpi if required
    [ "$role" != "cortx" ] && [ ! -d "/tmp/dcs/hpi" ] && mkdir -p /tmp/dcs/hpi && id -u zabbix > /dev/null 2>&1 && chown zabbix:zabbix /tmp/dcs/hpi

    # Add required user and vhost to RabbitMQ. Set user permissions etc.
    echo "Creating required RABBITMQ configuration.... "
    python3 $SSPL_BASE_DIR/bin/sspl_rabbitmq_reinit $product || {
        reinit_err="$?";
        echo -n "$SSPL_BASE_DIR/bin/sspl_rabbitmq_reinit failed ";
        echo "with exit code ${reinit_err} for product $product";
        exit 1;
    }

    echo "SSPL configured successfully."
    mkdir -p $(dirname $SSPL_CONFIGURED)

    # Create mdadm.conf to set ACL on it.
    touch /etc/mdadm.conf
    setfacl -m u:sspl-ll:rw /etc/mdadm.conf

    cp /opt/seagate/$PRODUCT_FAMILY/sspl/conf/sspl-ll.service.$product /etc/systemd/system/sspl-ll.service
    touch $SSPL_CONFIGURED

    # SSPL Log file configuration
    IFS='=' lfp=`grep sspl_log_file_path $SSPL_CONF`; logpath=( $lfp )
    SSPL_LOG_FILE_PATH=`echo ${logpath[1]}`

    [ ! -z "$SSPL_LOG_FILE_PATH" ] &&
    {
        sed -i "s|File=.*|File=\"$SSPL_LOG_FILE_PATH\")|g" $RSYSLOG_SSPL_CONF
        sed -i "1 s|^.*$|${SSPL_LOG_FILE_PATH}|g" /opt/seagate/$PRODUCT_FAMILY/sspl/conf/etc/logrotate.d/sspl_logs
    }


    # Configure log file path in Rsyslog and logrotate configuration file
    IFS='=' lfp=`grep log_file_path $SSPL_CONF`; datapath=( $lfp )
    LOG_FILE_PATH=`echo ${datapath[1]}`

    if [ -z "$LOG_FILE_PATH" ]
    then
        sed -i "s|File=.*|File=\/var/log/$PRODUCT_FAMILY/iem/iem_messages\"|g" $RSYSLOG_CONF
    else
        sed -i "s|File=.*|File=\"${LOG_FILE_PATH}\"|g" $RSYSLOG_CONF
        sed -i "1 s|^.*$|${LOG_FILE_PATH}|g" /opt/seagate/$PRODUCT_FAMILY/sspl/conf/etc/logrotate.d/iem_messages
    fi

    # Create logrotate dir in case it's not present for dev environment
    if [ ! -d "${LOGROTATE_DIR}" ]; then
        mkdir -p ${LOGROTATE_DIR}
    fi

    cp /opt/seagate/$PRODUCT_FAMILY/sspl/conf/etc/logrotate.d/iem_messages $IEM_LOGROTATE_CONF
    cp /opt/seagate/$PRODUCT_FAMILY/sspl/conf/etc/logrotate.d/sspl_logs $SSPL_LOGROTATE_CONF

    # This rsyslog restart will happen after successful updation of rsyslog
    # conf file and before sspl starts. If at all this will be removed from
    # here, there will be a chance that SSPL intial logs will not be present in
    # /var/log/<product>/sspl/sspl.log file. So, initial logs needs to be collected from
    # /var/log/messages
    systemctl restart rsyslog
    systemctl enable sspl-ll.service
    systemctl start sspl-ll.service
}

cmd="config"
[ $# -ge 1 ] && cmd=$1 && shift 1

case $cmd in
    check )
        [ -f $SSPL_CONFIGURED ]  && exit 0
        logger -i -p local3.err "SSPL is not configured. Run /opt/seagate/$PRODUCT_FAMILY/sspl/sspl_init"
        exit 1
        ;;

    config )
        config_sspl $*
        ;;

    create )
        create_req $*
        ;;

    * )
        usage
        ;;
esac
