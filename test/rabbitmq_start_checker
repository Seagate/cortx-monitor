#!/usr/bin/env python

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

import sys
import pika
import json
import pprint

SSPL_USER = "sspluser"
SSPL_PASS = "sspl4ever"
SSPL_VHOST = "SSPL"

channel = None
def process_msg(ch, method, properties, body):
    """
    Following is a message to check.
    {"username": "sspl-ll", "description": "Seagate Storage Platform Library - Low Level - Actuator Response", "title": "SSPL-LL Actuator Response", "expires": 3600, "signature": "None", "time": "2019-10-03 07:52:40.268960", "message": {"actuator_response_type": {"thread_controller": {"module_name": "ThreadController", "thread_response": "SSPL service has started successfully", "ack_type": "N/A"}}, "sspl_ll_msg_header": {"msg_version": "1.0.0", "schema_version": "1.0.0", "sspl_version": "1.0.0"}}}
    """
    global channel
    # print(body)
    successfull_msg = "SSPL service has started successfully"
    received_msg = None
    msg_dict = None
    try:
        msg_dict = json.loads(body)
        received_msg = msg_dict["message"]["actuator_response_type"]["thread_controller"]["thread_response"]
        if received_msg == successfull_msg:
            print("Got message: {0}".format(received_msg))
            channel.stop_consuming()
            sys.exit(0) 
    except Exception as e:
        print(e)
        pass

try:
    if len(sys.argv) <= 2 or len(sys.argv) > 3:
        print("usage: %s <exchange> <key>\n")
        sys.exit(1)

    SSPL_EXCHANGE = sys.argv[1]
    SSPL_KEY = sys.argv[2]

    creds = pika.PlainCredentials(SSPL_USER, SSPL_PASS)
    connection = pika.BlockingConnection(pika.\
        ConnectionParameters(host="localhost", virtual_host=SSPL_VHOST, credentials=creds))
    channel = connection.channel()
    result = channel.queue_declare(exclusive=True)
    channel.exchange_declare(exchange=SSPL_EXCHANGE, type='topic', durable=True)
    channel.queue_bind(queue=result.method.queue, exchange=SSPL_EXCHANGE, routing_key=SSPL_KEY)
    channel.basic_consume(process_msg, queue=result.method.queue)
    channel.start_consuming()

except Exception as e:
    print e
